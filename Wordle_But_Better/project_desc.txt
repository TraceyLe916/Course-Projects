WORDLE BUT BETTER (WBB) PROJECT DESCRIPTION

NOTE FOR DR ABRAHAM/GRADER/TESTER:
Since scores are only able to be saved in normal mode and the game’s difficulty is somewhat medium, the word each round will be printed to the terminal of Processing to make it easier to play in normal mode and check whether our score system is saving properly. Otherwise, for actual play, that part of the code would be commented out (Wordle class - lines 28-29).


SYNOPSIS
WBB is a game which combines elements of Wordle and unscrambling letters, a little bit of Space Invaders (having a ‘bow’ at the bottom of the screen to shoot an arrow). Letters move across the screen either horizontally or vertically, and the player has either an ‘add’ arrow or a ‘kill’ arrow which can be toggled with either the ‘f’ or ‘ENTER’ key.

The objective of the game is to prevent letters from hitting each other while also guessing the five-letter word at the bottom of the screen. The kill arrow, if it hits a letter, kills its bubble and causes it to disappear from the screen–players should do this to prevent a collision. The ‘add’ arrow attempts to add the letter to the bottom 5-letter grid which means players have to correctly spell out the word in order, but if it’s in the wrong place, the player loses a life. At the bottom right-hand side of the screen, there is an indicator that tells what arrow mode the player is currently in, and the two arrows have different colors–blue and red–for distinction.

Players will also lose a life if two letters collide, and after the letters collide, they both disappear. There are five lives per level. When all the lives are exhausted, their score aka their streak is outputted and saved to be inputted into the game again for the scoreboard.

The ‘bow’ is able to slide across the x-axis of the screen at a fixed y-coordinate near the bottom of the screen, and there is an arrow that continuously points towards where the mouse cursor is. Once the player sees the arrow is pointing in a good direction, they can tap a ‘SPACE’ to fire it.

There are two modes–easy and normal mode. Easy mode will have grayed out letters in the tiles which will tell players what the word is while normal mode will not. However, the trade-off is that players who play in easy mode will not be able to save their streaks for fairness.

Letters ‘die’ when they go off screen, and when they do, a new and random letter appears and floats across the screen. There will be two input files–one being the Wordle Database that contains almost 13,000 5-letter words and the input file for the high scores after playing. The output file is created if the player decides to save the game


IMPLEMENTATIONS

KEYSTROKES
> ‘f’ and ‘ENTER’ keys are used to toggle the arrow between ‘kill’ and ‘add’ mode
> ‘a’ and ‘d’ or the right arrow key and the left arrow key are used to move the bow across the screen in their respective directions.
> ‘m’ can be tapped in game to mute sound–it won’t mute sound when typing in a name to save a streak or in the main menu (since there is already a sound button there)
> ‘SPACEBAR’ is used to fire the arrow in the direction the mouse cursor is pointing at

GUI SYSTEMS
> Main menu has six buttons–start game, how to play, scoreboard, easy/normal mode, sound toggling, exit the program.
> The win /level progression screen has three buttons: continue to the next level, back to the main menu, or exit the program.
> The lose screen has 4 buttons–play again, save streak (this will be disabled if the player is on easy mode), main menu, and quit.
> The how to play screen is a graphic that has a back to menu button.
> The save streak screen displays an area for a player to type their name and displays their streak underneath it. There is a finish button that saves the score and takes the player back to the main screen

ANIMATION HIERARCHIES
> Bow object that translates left and right while an arrow rotates (since it follows the cursor location) in relation to the bow’s translation.

 DATA INPUT/OUTPUT
> Data input are the streaks.csv generated by the program itself when a player saves a streak and wordle.csv which contains all 12,000+ possible Wordle words.
> Data output is the saved scores of all players who saved their streaks which includes the name they typed in and their streak.

SOUND
> Main background music is 8-bit music taken from Super Danganronpa 2: Goodbye Despair.
> The bubbles create a typical bubble ‘pop’ sound effect when the bow collides with them or they collide with each other.
>  A bow ‘shooting’ sound effect when arrows are fired.
> If a letter is correctly hit on add mode, there is a sparkle sound that plays alongside the bubble pop sound
> If a letter is incorrectly hit on add mode, it plays an ‘anime punch’ sound effect overlapping with the bubble pop sound


CLASSES BREAKDOWN

Arrow Class
> create the arrow and handles all the arrow’s functionality (move, mode, orientation, and display)

Bow Class
> handles the bow object, including the bow and the arrow (from the Arrow class)
> moves bow left and right
> changes arrow mode

Bubble Class
> Creates bubbles that contain each letter on the screen
> Handles movement of each bubble (vertical and horizontal) 
> Contains popping animation when a bubble is hit
> Respawns new bubbles as current bubbles move off-screen

Button Class
> Creates buttons used on the GUI screens
> Taken from Tracey’s HandsOnButtons

Collision Class
> detect collisions between arrow and bubbles and between the bubbles

Game Class
> create the WBB game
> startGame: start the game, draw landing screen (home screen)
> run: draw different game screens, run game levels, play sounds (most code created by Tracey)
> manage key and mouse inputs (keyPressed and mousePressed events)
> manage current streak/score of the game

Level Class
> Creates all the elements in a level such as the moving bubbles, the bow, win/lose conditions checks, collision checks, lives, etc.

Life Class
>Calculates the amount of lives a player has left in each level, starts with 5 and triggers the lose condition if it hits 0
>Resets to 5 if a player passes a level

Score Class
> Creates the scoreboard and reads the streaks.csv input file and also outputs it when players save their streak
> Holds the GUI for the streak-saving screen

Screen Class
> Holds the GUI screens for the main menu, the lose screen, the win screen, and the how to play screen with buttons

Sound Class
> Stores all the sound files used
> Has a mute and unmute function for all sounds
> Closes the sounds properly to prevent audio file corruption

Streak Class
> stores the current score (amount of levels passed without losing)

Wordle Class
> Takes in the wordle.csv and randomly selects a word from it to be used in the level
> Prints the word to the terminal for debugging purposes


UNEXPECTED CHALLENGES

> One of the more difficult parts of the project was dictating where the bubbles spawned. At first, they would move randomly across the screen, and after we patched that up, we had to create a way for them to respawn after they moved out of bounds, and then we had to figure out how to stop them from colliding upon respawning since that would have been unfair to players.

> A learning curve was making the switch from Processing’s Sound library and using Minim. Finding a way to close all the sounds and avoiding the “JavaSound Minim Error: Error reading from the file - Stream closed” from popping up in all closing scenarios (whether that be from the quit button or Processing’s exit widget) was a challenge to debug. 


WORK BREAKDOWN

Trang Do
> Bow Class
> Arrow Class
> Collision Class
> Game Class
> Level Class (collisions)
> Bubble Class (collisions method)
> Main (restructuring code)

Carolyn Pyun
> Bubble Class
> Life Class
> Streak Class
> Level Class (display stats)

Tracey Le
> Wordle Class
> Screen Class
> Score Class
> Level Class (object creation + movement / wordle checker)
> Button Class
> Sound Class
> Game Class (mousePressed method)
> Main (exit function) + Graphics
